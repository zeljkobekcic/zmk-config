/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#define ROLLOW

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#include "../layer8/config.dtsi"
#include "../layer8/tap_dances.dtsi"
#include "../layer8/mod_morphs.dtsi"
#include "../layer8/macros.dtsi"

&lt {
    flavor = "tap-preferred";
    tapping-term-ms = <TAPPING_TERM>;
};

&mt {
    flavor = "tap-preferred";
    tapping-term-ms = <TAPPING_TERM>;
};

&sk {
        quick-release;
};

/ {
    chosen {
        zmk,matrix_transform = &five_column_transform;
	};

    behaviors {
    };

     conditional_layers {
        compatible = "zmk,conditional-layers";
    
        tri_layer {
            if-layers = <SYM NAV>;
            then-layer = <NUM>;
        };
    };

    keymap {
        compatible = "zmk,keymap";
        base_layer {
            bindings = <
                &kp Q       &kp W       &kp F       &kp P       &kp B       &kp J       &kp L       &kp U       &kp Y       &kp SQT
                &kp A       &kp R       &kp S       &kp T       &kp G       &kp M       &kp N       &kp E       &kp I       &kp O   
                &kp Z       &kp X       &kp C       &kp D       &kp V       &kp K       &kp H       &kp COMMA   &kp DOT     &kp FSLH 
                                        &none       &mo NAV     &kp SPACE   &kp LSHFT   &mo SYM     &none
            >;
        };
        nav_layer {
            bindings = <
            &kp TAB   XXXXXXXX  SPACE_LEFT  SPACE_RIGHT ALFRED      &kp ENTER &kp HOME  &kp END   &kp BSPC  &kp DEL
            &sk LSHFT &sk LCTRL &sk LALT    &sk LCMD    MEH         XXXXXXXX  &kp LEFT  &kp DOWN  &kp UP    &kp RIGHT 
            XXXXXXXX  XXXXXXXX  TAB_LEFT    TAB_RIGHT   HYPER       XXXXXXXX  XXXXXXXX  &kp PG_DN &kp PG_UP XXXXXXXX
                                &trans      &trans      &trans      &mo ADJ   &trans    &trans
                >;
        };
        sym_layer {
            bindings = <
            &kp ESC     &kp DLLR    &kp PRCNT   &kp LPAR    &kp RPAR    &kp CARET   &kp TILDE   &kp GRAVE   &kp PIPE    &kp BSLH
            &kp MINUS   &kp PLUS    &kp EQUAL   &kp LBRC    &kp RBRC    &kp HASH    &sk LCMD    &sk LALT    &sk LCTRL   &sk LSHFT  
            &kp UNDER   &kp STAR    &kp AT      &kp LBKT    &kp RBKT    XXXXXXXX    &kp AMPS    &kp SEMI    &kp COLON   &kp EXCL  
                                    &trans      &trans      &trans      &trans      &trans      &trans
            >;
        };
        num_layer {
            bindings = <
          &kp N1    &kp N2    &kp N3    &kp N4     &kp N5      &kp N6    &kp N7     &kp N8     &kp N9     &kp N0   
          &sk LSHFT &sk LCTRL &sk LALT  &sk LCMD   &kp F11     &kp F12   &sk LCMD   &sk LALT   &sk LCTRL  &sk LSHFT  
          &kp F1    &kp F2    &kp F3    &kp F4     &kp F5      &kp F6    &kp F7     &kp F8     &kp F9     &kp F10   
                              &trans      &trans      &trans      &trans      &trans      &trans
            >;
        };
        adj_layer {
            bindings = <
                &none     &none     &none     &none           BTClear         &none     &none           &none       &none     &none
                BT4       BT3       BT2       BT1             BT0             &none     &none           &none       &none     &none
                &none     &none     &none     &bootloader     &none           &none     &bootloader     &none       &none     &trans
                                    &trans    &trans          &trans          &trans    &trans          &trans      
            >;
        };

    };
};
